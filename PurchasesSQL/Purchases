import telebot
import sqlite3
import settings6
import datetime

bot = telebot.TeleBot(settings6.API_KEY)
name = None

@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('purch.sql') #—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cur = conn.cursor() #—á–µ—Ä–µ–∑ –Ω–µ–≥–æ –º—ã —Å–º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ë–î

    cur.execute('CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, purchases varchar(255), price INT, description varchar(255), date varchar(255))') #CREATE TABLE IF NOT EXIST users –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    conn.commit() #—á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã. —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–º–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å —Ç–∞–±–ª–∏—Ü–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö 
    cur.close() #–±—É–¥—É –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∫—É—Ä—Å–æ—Ä
    conn.close() #–∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ 

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/–ø–æ–∫—É–ø–∫–∏')
    bot.register_next_step_handler(message, user_purchases)

#–ø–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_purchases(message):
    global purchases
    purchases = message.text.strip() #strip —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –î–û –∏ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Ü–µ–Ω—É')
    bot.register_next_step_handler(message, user_price)
#–ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_price(message):
    global price
    try:
        price = int(message.text.strip())#strip —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –î–û –∏ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞
    except ValueError:  #—Ñ–∏–∫—Å–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Çüò° –í–ø–∏—à–∏ —Ü–µ–Ω—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
        bot.register_next_step_handler(message, user_price)
        return #–∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º—É –∫–æ–¥—É –∏ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç —ç—Ç–æ —ç—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è
    
    if price < 0:
        bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º 0üò° –í–ø–∏—à–∏ —Å—É–º–º—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
        bot.register_next_step_handler(message, user_price)
        price = message.text.strip()
        return  
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏')
        bot.register_next_step_handler(message, user_description)

def user_description(message):
    global description
    description = message.text.strip()
    global date
    date = datetime.datetime.now()
    date = date.strftime("%d.%m.%Y")
    
    conn = sqlite3.connect('purch.sql')
    cur = conn.cursor()

    cur.execute("INSERT INTO users (purchases, price, description, date) VALUES ('%s', '%s', '%s', '%s')" % (purchases, price, description, date))
    conn.commit()
    cur.close()
    conn.close()

    markup = telebot.types.InlineKeyboardMarkup() #—Ç—É—Ç –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–π–ø—Å—ã"from telebot import types", –Ω–æ –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫ —Ç–∞–π–ø—Å–∞–º –≤—Ä—É—á–Ω—É—é –ø–æ –ø—É—Ç–∏
    markup.add(telebot.types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤/–ø–æ–∫—É–ø–æ–∫', callback_data="users"))
    markup.add(telebot.types.InlineKeyboardButton('–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫', callback_data='else'))
    bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data != 'else':
        conn = sqlite3.connect('purch.sql')
        cur = conn.cursor()

        cur.execute('SELECT * FROM users')
        users = cur.fetchall()

        info = ''
        for el in users:
            info += f'–ü–æ–∫—É–ø–∫–∞: {el[1]}, —Ü–µ–Ω–∞: {el[2]}, –æ–ø–∏—Å–∞–Ω–∏–µ: {el[3]}, –¥–∞—Ç–∞: {el[4]}\n'

        cur.close()
        conn.close()
        bot.send_message(call.message.chat.id, info)
    else:
        conn = sqlite3.connect('purch.sql')
        cur = conn.cursor()

        cur.execute('SELECT SUM(price) FROM users')
        total_price = cur.fetchone()[0]  

        info = f'–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {total_price}\n'

        cur.close()
        conn.close()
        bot.send_message(call.message.chat.id, info)

bot.polling(none_stop=True)